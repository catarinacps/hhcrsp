#+title: HHCRSP-SA lab-book
#+author: Henrique Silva
#+email: hcpsilva@inf.ufrgs.br
#+infojs_opt:
#+property: session *R*
#+property: cache yes
#+property: results graphics
#+property: exports both
#+property: tangle yes

Welcome to the project lab-book! This lab-book will be mainly dedicated to the
experiments that will be done in this project.

Having that said, we'll only have two primary experiments:

1. Math solver (testing max solver time and etc)
2. Simulated Annealing (testing temperature and such)

Both experiments will use the same test instances.

* Test Configurations

As follows:

| CPU                        | Memory | Distro             | Kernel Version    |
|----------------------------+--------+--------------------+-------------------|
| Intel Core i5 4570 x 1     | 8GB    | Manjaro 18.1.3     | 4.19.84-1-MANJARO |
| Intel Xeon Silver 4116 x 2 | 94GB   | Debian 10 (Buster) | 4.19.0-6          |

* Julia package dependencies

Run this script to get all dependencies installed:

#+begin_src julia :exports both :tangle experiments/deps.jl
using Pkg

Pkg.add(["JuMP",
         "Cbc",
         "MathOptFormat",
         "ArgParse",
         "PackageCompiler"])
#+end_src

* Math Solver (CBC)

We'll use [[https://github.com/coin-or/Cbc][CBC]] for the solver, as it uses a multithreaded implementation and is
pretty nice overall.

** Design

The random seed will be:

#+begin_src R :session :results value :exports results
floor(runif(1,1,99999))
#+end_src

#+RESULTS:
: 35182

Simple completely factorial design:

#+begin_src R :session :results output :exports both
suppressMessages(library(tidyverse))
suppressMessages(library(DoE.base))

ins = c("CPLEX_HCSRP_10_3",
        "CPLEX_HCSRP_25_9")
dummy = c(1, 2)

fac.design(nfactors=2,
           replications=5,
           repeat.only=FALSE,
           blocks=1,
           randomize=TRUE,
           seed=35182,
           factor.names=list(
             instance=ins,
             dummy=dummy)) %>%
  as_tibble %>%
  transmute(id=as.numeric(Blocks), instance) %>%
  distinct %>%
  write_delim("experiments/math.plan", delim=" ", col_names=FALSE)
#+end_src

#+RESULTS:
:
: creating full factorial with 4 runs ...

** Script

#+begin_src bash :exports both :results output :tangle experiments/math.slurm
#!/bin/bash
#SBATCH --time=24:00:00
#SBATCH --chdir=.
#SBATCH --partition=cei
#SBATCH --nodes=1
#SBATCH --output=%x_%j.out
#SBATCH --error=%x_%j.err
#SBATCH --mail-type=END,FAIL
#SBATCH --mail-user=hcpsilva@inf.ufrgs.br

set -euo pipefail

HOST=$(hostname)

# machine:
MACHINE=${HOST}_${SLURM_CPUS_ON_NODE}

# parameters:
# the experiment ID, defined in the lab-book
EXP_ID=math_otm_tf
# the code directory
CODE_DIR=$1
# the experiment directory
EXP_DIR=$CODE_DIR/labbook/experiments

# experiment name (which is the ID and the machine and its core count)
EXP_NAME=${EXP_ID}_${MACHINE}

# go to the scratch dir
cd $SCRATCH

# and clean everything
rm -rf *

# prepare our directory
mkdir $EXP_NAME
pushd $EXP_NAME

# get binaries
wget https://julialang-s3.julialang.org/bin/linux/x64/1.2/julia-1.2.0-linux-x86_64.tar.gz
tar xzf julia-1.2.0-linux-x86_64.tar.gz
mv julia-1.2.0 julia

wget https://bintray.com/coin-or/download/download_file\?file_path\=Cbc-2.10-linux-x86_64-gcc5.4.0.tgz -O cbc-2.10.tgz
mkdir cbc
tar xzf cbc-2.10.tgz -C cbc
rm cbc/bin/cbc
wget https://ampl.com/dl/open/cbc/cbc-linux64.zip
unzip cbc-linux64.zip -d cbc/bin
rm cbc-linux64.zip

# cause its missing this one lib
ln -s $(find ~/Installs -name 'libgfortran.so.3') cbc/lib/libgfortran.so.3

# update env vars
LD_LIBRARY_PATH+=:$(readlink -f cbc/lib)
LD_LIBRARY_PATH+=:$(readlink -f julia/lib)
LD_LIBRARY_PATH+=:$(readlink -f julia/lib/julia)
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH

PATH+=:$(readlink -f julia/bin)
PATH+=:$(readlink -f cbc/bin)
export PATH=$PATH

NUM_THREADS=$(lscpu | grep '^CPU(s):' | awk '{print $2}')
NUM_NUMA_NODES=$(lscpu | grep '^NUMA node(s)' | awk '{print $3}')

USABLE_CPUS=$(($NUM_THREADS / $NUM_NUMA_NODES))

# download julia deps
julia $EXP_DIR/deps.jl

# copy the code folder
cp -r $CODE_DIR code
mkdir results
results_csv=$(readlink -f results/${EXP_NAME}.csv)
results_dir=$(readlink -f results)
pushd code

# build so we run faster
make

# init the csv results file
echo "id,instance,score,gap" > $results_csv

# math solver
while read -r id instance; do
    csv_line=${id},${instance}

    echo
    echo "--> Running with params: $id $instance"

    log_file=$results_dir/${id}_${instance}.log

    ./build/hhcrsp \
        -o model.lp \
        instances/Instanz${instance}.txt \
        math > $log_file

    cbc \
        -timemo elapsed \
        -thread $USABLE_CPUS \
        -import model.lp \
        -sec 300 \
        -solve \
        -solu sol.lp >> $log_file

    obj_value=$(grep '^Objective' $log_file | awk '{print $3}')

    if grep -q '^Gap' $log_file; then
        gap=$(grep '^Gap' $log_file | awk '{print $2}')
    else
        gap=0.0
    fi

    echo ${csv_line},${obj_value},${gap} >> $results_csv
done < $EXP_DIR/math.plan

popd

# pack everything and send to the exp dir
tar czf $EXP_DIR/data/$EXP_NAME.tar.gz *

popd
rm -rf $SCRATCH/*
#+end_src

* Simulated Annealing

Here may lie our custom simulated annealing implementation.

** Design

The random seed will be:

#+begin_src R :session :results value :exports results
floor(runif(1,1,99999))
#+end_src

#+RESULTS:
: 94627

Simple completely factorial design:

#+begin_src R :session :results output :exports both
suppressMessages(library(tidyverse))
suppressMessages(library(DoE.base))

ins = c("CPLEX_HCSRP_10_3", "CPLEX_HCSRP_25_3", "CPLEX_HCSRP_25_9")
temp = c(50, 100, 125, 150, 200)
fac = c(0.8, 0.85, 0.9)
strat = c(1, 2)
iter = c("50 10", "100 10", "150 20")

fac.design(nfactors=5,
           repeat.only=FALSE,
           blocks=1,
           randomize=TRUE,
           seed=94627,
           factor.names=list(
             instance=ins,
             temperature=temp,
             factor=fac,
             strategy=strat,
             iterations=iter)) %>%
  as_tibble %>%
  write_delim("experiments/sa.plan", delim=" ", col_names=FALSE)
#+end_src

#+RESULTS:
:
: creating full factorial with 270 runs ...

** Script

#+begin_src bash :exports both :results output :tangle experiments/sa.slurm
#!/bin/bash

set -euxo pipefail

HOST=$(hostname)

# machine:
MACHINE=${HOST}_$(lscpu | grep '^CPU(s):' | awk '{print $2}')

# parameters:
# the experiment ID, defined in the lab-book
EXP_ID=sa_otm_tf
# the code directory
CODE_DIR=$1
# the experiment directory
EXP_DIR=$CODE_DIR/labbook/experiments

# experiment name (which is the ID and the machine and its core count)
EXP_NAME=${EXP_ID}_${MACHINE}

# go to the scratch dir
cd $2

# and clean everything
rm -rf *

# prepare our directory
mkdir $EXP_NAME
pushd $EXP_NAME

# copy the code folder
cp -r $CODE_DIR code
mkdir results
results_csv=$(readlink -f results/${EXP_NAME}.csv)
results_dir=$(readlink -f results)
pushd code

# build so we run faster
make

# init the csv results file
echo "instance,temperature,strategy,factor,iterations_outer,iterations_inner,score" > $results_csv

# math solver
while read -r instance temperature strategy factor iterations; do
    iterations=${iterations//\"}
    csv_line=${instance},${temperature},${strategy},${factor},${iterations// /,}

    echo
    echo "--> Running with params: $instance $temperature $strategy $factor $iterations"

    log_file=$results_dir/${instance}_${temperature}_${strategy}_${factor}_${iterations// /_}.log

    ./build/hhcrsp \
        -t $temperature \
        -g $strategy \
        -f $factor \
        -i $iterations \
        instances/Instanz${instance}.txt \
        sa > $log_file

    obj_value=$(grep '^Score' $log_file | awk '{print $2}')

    echo ${csv_line},${obj_value} >> $results_csv
done < $EXP_DIR/sa.plan

popd

# pack everything and send to the exp dir
tar czf $EXP_DIR/data/$EXP_NAME.tar.gz *

popd
rm -rf $SCRATCH/*
#+end_src
